/* Plugin Template generated by Pawn Studio */

#include <sourcemod>
#include <swarmtools>

public Plugin:myinfo = 
{
	name = "SwarmStats",
	author = "IBeMad",
	description = "Records detailed statistics in Alien Swarm.",
	version = "0.2",
	url = "bit.ly/ch1ckenscoop"
}

public OnPluginStart()
{
	HookEvent("alien_died", Event_Alien_Died);
	HookEvent("mission_success", Event_Mission_Success);
	//HookEvent("marine_died", Event_Marine_Died);
	//TODO: Deaths = -100 points.
	//TODO: Log player points separatly then add them to the main file to reduce lag and to be able to report on them later.
}

public Action:Event_Mission_Success(Handle:event, const String:name[], bool:dontBroadcast)
{
	new Handle:players = CreateKeyValues("game");
	new Handle:maps = CreateKeyValues("Maps");
	new Handle:skill = FindConVar("asw_skill");
	
	new String:steamid[64];
	new String:mapname[64];
	new skill_lvl;
	
	FileToKeyValues(players, "addons/sourcemod/SwarmStats/gameinfo.swarmstats");
	FileToKeyValues(maps, "addons/sourcemod/SwarmStats/maps.swarmstats");
	GetCurrentMap(mapname, sizeof(mapname));
	
	KvJumpToKey(players, "Difficulty");
	skill_lvl = KvGetNum(players, "asw_skill", 1);
	KvRewind(players);
	
	KvJumpToKey(players, "Players");
	KvGotoFirstSubKey(players);
	do
	{
		KvGetSectionName(players, steamid, sizeof(steamid))
		//PrintToServer("%s", section_name);
		
		if (skill_lvl == 1)
		{
			KvJumpToKey(maps, "Easy", true);
			KvJumpToKey(maps, mapname, true);
			KvJumpToKey(maps, steamid, true);
			new oldplays = KvGetNum(maps, "wins");
			KvSetNum(maps, "wins", oldplays + 1);
			KvRewind(maps);
		}
		else if (skill_lvl == 2)
		{
			KvJumpToKey(maps, "Normal", true);
			KvJumpToKey(maps, mapname, true);
			KvJumpToKey(maps, steamid, true);
			new oldplays = KvGetNum(maps, "wins");
			KvSetNum(maps, "wins", oldplays + 1);
			KvRewind(maps);
		}
		else if (skill_lvl == 3)
		{
			KvJumpToKey(maps, "Hard", true);
			KvJumpToKey(maps, mapname, true);
			KvJumpToKey(maps, steamid, true);
			new oldplays = KvGetNum(maps, "wins");
			KvSetNum(maps, "wins", oldplays + 1);
			KvRewind(maps);
		}
		else if (skill_lvl == 4)
		{
			KvJumpToKey(maps, "Insane", true);
			KvJumpToKey(maps, mapname, true);
			KvJumpToKey(maps, steamid, true);
			new oldplays = KvGetNum(maps, "wins");
			KvSetNum(maps, "wins", oldplays + 1);
			KvRewind(maps);
		}
		else
		{
			KvJumpToKey(maps, "Brutal", true);
			KvJumpToKey(maps, mapname, true);
			KvJumpToKey(maps, steamid, true);
			new oldplays = KvGetNum(maps, "wins");
			KvSetNum(maps, "wins", oldplays + 1);
			KvRewind(maps);
		}
		
		//KvJumpToKey(players, "Players", true);
		//KvJumpToKey(players, steamid, true);
		
		
		//TODO: Order players by score.
		//new String:pname[64];
		//KvGetString(players, "name", pname, sizeof(pname));
		//PrintToChatAll("%s scored %i points this game.", pname, KvGetNum(players, "points"));
		
		//KvRewind(players);
		
	} while(KvGotoNextKey(players))
	
	KvRewind(maps);
	KeyValuesToFile(maps, "addons/sourcemod/SwarmStats/maps.swarmstats");
	
	
	
	
	CloseHandle(players);
	CloseHandle(skill);
	CloseHandle(maps);
}

public OnMapEnd()
{
	new Handle:players = CreateKeyValues("game");
	new Handle:maps = CreateKeyValues("Maps");
	new Handle:permPlayers = CreateKeyValues("Players");
	new Handle:skill = FindConVar("asw_skill");
	
	new String:steamid[64];
	new String:mapname[64];
	new skill_lvl;
	
	FileToKeyValues(players, "addons/sourcemod/SwarmStats/gameinfo.swarmstats");
	FileToKeyValues(maps, "addons/sourcemod/SwarmStats/maps.swarmstats");
	FileToKeyValues(permPlayers, "addons/sourcemod/SwarmStats/players.swarmstats");
	GetCurrentMap(mapname, sizeof(mapname));
	
	KvJumpToKey(players, "Difficulty");
	skill_lvl = KvGetNum(players, "asw_skill", 1);
	KvRewind(players);
	
	KvJumpToKey(players, "Players");
	KvGotoFirstSubKey(players);
	do
	{
		KvGetSectionName(players, steamid, sizeof(steamid))
		//PrintToServer("%s", section_name);
		
		if (skill_lvl == 1)
		{
			KvJumpToKey(maps, "Easy", true);
			KvJumpToKey(maps, mapname, true);
			KvJumpToKey(maps, steamid, true);
			new oldplays = KvGetNum(maps, "Plays");
			KvSetNum(maps, "plays", oldplays + 1);
			KvRewind(maps);
		}
		else if (skill_lvl == 2)
		{
			KvJumpToKey(maps, "Normal", true);
			KvJumpToKey(maps, mapname, true);
			KvJumpToKey(maps, steamid, true);
			new oldplays = KvGetNum(maps, "Plays");
			KvSetNum(maps, "plays", oldplays + 1);
			KvRewind(maps);
		}
		else if (skill_lvl == 3)
		{
			KvJumpToKey(maps, "Hard", true);
			KvJumpToKey(maps, mapname, true);
			KvJumpToKey(maps, steamid, true);
			new oldplays = KvGetNum(maps, "Plays");
			KvSetNum(maps, "plays", oldplays + 1);
			KvRewind(maps);
		}
		else if (skill_lvl == 4)
		{
			KvJumpToKey(maps, "Insane", true);
			KvJumpToKey(maps, mapname, true);
			KvJumpToKey(maps, steamid, true);
			new oldplays = KvGetNum(maps, "Plays");
			KvSetNum(maps, "plays", oldplays + 1);
			KvRewind(maps);
		}
		else
		{
			KvJumpToKey(maps, "Brutal", true);
			KvJumpToKey(maps, mapname, true);
			KvJumpToKey(maps, steamid, true);
			new oldplays = KvGetNum(maps, "Plays");
			KvSetNum(maps, "plays", oldplays + 1);
			KvRewind(maps);
		}
		
		KvJumpToKey(permPlayers, steamid, true);
		new String:pname[64];
		KvGetString(players, "name", pname, sizeof(pname));
		
		KvSetNum(permPlayers, "kills", KvGetNum(permPlayers, "kills") + KvGetNum(players, "kills"));
		KvSetNum(permPlayers, "points", KvGetNum(permPlayers, "points") + KvGetNum(players, "points"));
		KvSetString(permPlayers, "name", pname);
		
		KvRewind(permPlayers);
	} while(KvGotoNextKey(players))
	
	KvRewind(maps);
	KeyValuesToFile(maps, "addons/sourcemod/SwarmStats/maps.swarmstats");
	KeyValuesToFile(permPlayers, "addons/sourcemod/SwarmStats/players.swarmstats");
	
	DeleteFile("addons/sourcemod/SwarmStats/gameinfo.swarmstats");
	CloseHandle(players);
	CloseHandle(permPlayers);
	CloseHandle(skill);
	CloseHandle(maps);
}

public Action:Event_Alien_Died(Handle:event, const String:name[], bool:dontBroadcast)
{	
	new String:steamid[50];
	GetClientAuthString(Swarm_GetClientOfMarine(GetEventInt(event, "marine")), steamid, sizeof(steamid));
	
	new Handle:gameskill = FindConVar("asw_skill");
	new Handle:nowplaying_h = CreateKeyValues("game");
	FileToKeyValues(nowplaying_h, "addons/sourcemod/SwarmStats/gameinfo.swarmstats");
	KvJumpToKey(nowplaying_h, "Difficulty", true);
	KvSetNum(nowplaying_h, "asw_skill", GetConVarInt(gameskill));
	KvRewind(nowplaying_h);
	KvJumpToKey(nowplaying_h, "Players", true);
	KvJumpToKey(nowplaying_h, steamid, true);
	//KvSetString(nowplaying_h, "player", "playing");
	KvRewind(nowplaying_h);
	
	//new Handle:kv_handle = CreateKeyValues("Players");
	//FileToKeyValues(kv_handle, "addons/sourcemod/SwarmStats/Players.swarmstats")
	new String:Sname[100];
	
	//KvGotoFirstSubKey(kv_handle);
	KvJumpToKey(nowplaying_h, "Players", true);
	KvJumpToKey(nowplaying_h, steamid, true);
	
	GetClientName(Swarm_GetClientOfMarine(GetEventInt(event, "marine")), Sname, sizeof(Sname));
	KvSetString(nowplaying_h, "name", Sname);
	KvSetNum(nowplaying_h, "client", Swarm_GetClientOfMarine(GetEventInt(event, "marine")));
	
	new killsnum = KvGetNum(nowplaying_h, "kills");
	KvSetNum(nowplaying_h, "kills", (killsnum + 1));
	
	new Float:pointsnum = KvGetFloat(nowplaying_h, "points");
	new weapon_int = GetEventInt(event, "weapon");	
	new alien_int = GetEventInt(event, "alien");
	new Float:points_new = 1.0;
	
	if (weapon_int == 35)
	{
		points_new = -1.0;
	}
	else if (weapon_int == 74)
	{
		points_new = -1.0;
	}
	else if (weapon_int == 75)
	{
		points_new = -1.0;
	}
	else if (weapon_int == 76)
	{
		points_new = -1.0;
	}
	else
	{
		if (alien_int == 55)					//Ranger
		{
			points_new = 2.0;
		}
		else if (alien_int == 29) 				//Parasites
		{
			points_new = 4.0;	
		}
		else if (alien_int == 52)				//Parasite Eggs
		{
			points_new = 3.0;	
		}
		else if (alien_int == 31)				//Harvesters
		{
			points_new = 5.0;	
		}
		else if (alien_int == 49)				//Goo (aka Biomass)
		{
			points_new = 10.0;
		}
		else if (alien_int == 42)				//Boomers
		{
			points_new = 10.0;
		}
		else if (alien_int == 54)				//Mortars
		{
			points_new = 7.0;	
		}
		else if (alien_int == 28)				//Shieldbug
		{
			points_new = 15.0;
		}
		else if (alien_int == 45)				//Queen
		{
			points_new = 100.0;
		}
		else if (alien_int == 137)				//Uber Drones
		{
			points_new = 3.0;
		}
	
	
		if (GetConVarInt(gameskill) == 1)
		{
			points_new = points_new * 0.5;
		}
		else if (GetConVarInt(gameskill) == 3)
		{
			points_new = points_new * 1.25
		}
		else if (GetConVarInt(gameskill) == 4)
		{
			points_new = points_new * 1.5;
		}
		else if (GetConVarInt(gameskill) == 5)
		{
			points_new = points_new * 1.75;
		}
	}
	KvSetFloat(nowplaying_h, "points", points_new + pointsnum);
	
	//KvRewind(kv_handle);
	KvRewind(nowplaying_h);
	//KeyValuesToFile(kv_handle, "addons/sourcemod/SwarmStats/players.swarmstats");
	KeyValuesToFile(nowplaying_h, "addons/sourcemod/SwarmStats/gameinfo.swarmstats");
	//CloseHandle(kv_handle);
	CloseHandle(gameskill);
	CloseHandle(nowplaying_h);
}